{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Galaxygine! Thank you for using Galaxygine, the game engine written using TypeScript for the web! To see how to get started, click here For more information about Galaxygine, click here For more information about Resources, click here","title":"Home"},{"location":"#welcome-to-galaxygine","text":"Thank you for using Galaxygine, the game engine written using TypeScript for the web! To see how to get started, click here For more information about Galaxygine, click here For more information about Resources, click here","title":"Welcome to Galaxygine!"},{"location":"getting_started/","text":"Getting Started with Galaxygine Here are a few simple steps to install and configure Galaxygine Installation There are a few ways to install Galaxygine. Using a script You can create a Galaxygine project using a python script. Where to find it Said script can be found here . And can be downloaded with this command: wget https://gist.githubusercontent.com/GalaxyGamingBoy/02f34126b1a5ddf202014119af1600fa/raw/makeGalaxygineTemplate.py . Usage The script can be run like this: ./makeGalaxygineTemplate.py < PROJECT NAME > Manualy downloading it The latest template can be found here . Just extract it and use it. Building a project To build the project run npm run build To sync the project to the latest Galaxygine version run npm run sync To build & sync the project run npm run sync:build","title":"Getting Started"},{"location":"getting_started/#getting-started-with-galaxygine","text":"Here are a few simple steps to install and configure Galaxygine","title":"Getting Started with Galaxygine"},{"location":"getting_started/#installation","text":"There are a few ways to install Galaxygine.","title":"Installation"},{"location":"getting_started/#using-a-script","text":"You can create a Galaxygine project using a python script.","title":"Using a script"},{"location":"getting_started/#where-to-find-it","text":"Said script can be found here . And can be downloaded with this command: wget https://gist.githubusercontent.com/GalaxyGamingBoy/02f34126b1a5ddf202014119af1600fa/raw/makeGalaxygineTemplate.py .","title":"Where to find it"},{"location":"getting_started/#usage","text":"The script can be run like this: ./makeGalaxygineTemplate.py < PROJECT NAME >","title":"Usage"},{"location":"getting_started/#manualy-downloading-it","text":"The latest template can be found here . Just extract it and use it.","title":"Manualy downloading it"},{"location":"getting_started/#building-a-project","text":"To build the project run npm run build To sync the project to the latest Galaxygine version run npm run sync To build & sync the project run npm run sync:build","title":"Building a project"},{"location":"about/contributions/","text":"Contributions You can contribute to the engine by opening a pull request on the git repo You can contribute to the documentation by opening a pull request on the git repo","title":"Contributions"},{"location":"about/contributions/#contributions","text":"You can contribute to the engine by opening a pull request on the git repo You can contribute to the documentation by opening a pull request on the git repo","title":"Contributions"},{"location":"about/license/","text":"MIT License Copyright (c) 2022 GalaxyGamingBoy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#mit-license","text":"Copyright (c) 2022 GalaxyGamingBoy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"engine/galaxygine/","text":"Galaxygine This file contains the methods of Galaxygine. Methods The methods avainable are: setCanvasContext(context): void galaxygineMainLoop(customCode): void setCanvasContext(context): void Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The new context that will be assigned to Galaxygine Return Value Return Type Usage - - - Sets all the canvas context that are needed for Galaxygine. i.e. The Draw class Note This method is intended to be used with the Core.engineInitialization as its parameter galaxygineMainLoop(customCode): void Parameter Parameter Type Default Usage customCode Function - The function that will be executed every tick Return Value Return Type Usage - - - The main loop of Galaxygine that will be run every tick Warning Erasing and Redrawing the Canvas are already there. There is no need to add them to your customCode function. Note A callback is expected, even an empty one.","title":"Galaxygine"},{"location":"engine/galaxygine/#galaxygine","text":"This file contains the methods of Galaxygine.","title":"Galaxygine"},{"location":"engine/galaxygine/#methods","text":"The methods avainable are: setCanvasContext(context): void galaxygineMainLoop(customCode): void","title":"Methods"},{"location":"engine/galaxygine/#setcanvascontextcontext-void","text":"Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The new context that will be assigned to Galaxygine Return Value Return Type Usage - - - Sets all the canvas context that are needed for Galaxygine. i.e. The Draw class Note This method is intended to be used with the Core.engineInitialization as its parameter","title":"setCanvasContext(context): void"},{"location":"engine/galaxygine/#galaxyginemainloopcustomcode-void","text":"Parameter Parameter Type Default Usage customCode Function - The function that will be executed every tick Return Value Return Type Usage - - - The main loop of Galaxygine that will be run every tick Warning Erasing and Redrawing the Canvas are already there. There is no need to add them to your customCode function. Note A callback is expected, even an empty one.","title":"galaxygineMainLoop(customCode): void"},{"location":"engine/galaxygine/core/","text":"Core This file contains the core methods of Galaxygine, from the initialization to touchscreen checking. Methods The methods avainable are: engineInitialization(mountID, canvasWidth, canvasHeight): CanvasRenderingContext2D getScreenSize(): Vector2 hasTouchscreen(): Boolean engineInitialization(mountID, canvasWidth, canvasHeight): CanvasRenderingContext2D Parameter Parameter Type Default Usage mountID string galaxygine The id of the element that the Galaxygine canvas will be mounted on canvasWidth number window.innerWidth The width of the canvas canvasHeight number window.innerHeight The height of the canvas Return Value Return Type Usage galaxygine_context CanvasRenderingContext2D The 2D canvas rendering context of the new canvas This function initializes Galaxygine by creating a canvas on the element with the id given to it by mountID and has a width of canvasWidth and height of canvasHeight. getScreenSize(): Vector2 Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage windowSize Vector2 The size of the window This function return the width and the height of the browser window. hasTouchscreen(): Boolean Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage hasTouchscreen Boolean Does the device has a touchscreen connected? This function return a boolean indicating if the device has a touchscreen connected.","title":"Core"},{"location":"engine/galaxygine/core/#core","text":"This file contains the core methods of Galaxygine, from the initialization to touchscreen checking.","title":"Core"},{"location":"engine/galaxygine/core/#methods","text":"The methods avainable are: engineInitialization(mountID, canvasWidth, canvasHeight): CanvasRenderingContext2D getScreenSize(): Vector2 hasTouchscreen(): Boolean","title":"Methods"},{"location":"engine/galaxygine/core/#engineinitializationmountid-canvaswidth-canvasheight-canvasrenderingcontext2d","text":"Parameter Parameter Type Default Usage mountID string galaxygine The id of the element that the Galaxygine canvas will be mounted on canvasWidth number window.innerWidth The width of the canvas canvasHeight number window.innerHeight The height of the canvas Return Value Return Type Usage galaxygine_context CanvasRenderingContext2D The 2D canvas rendering context of the new canvas This function initializes Galaxygine by creating a canvas on the element with the id given to it by mountID and has a width of canvasWidth and height of canvasHeight.","title":"engineInitialization(mountID, canvasWidth, canvasHeight): CanvasRenderingContext2D"},{"location":"engine/galaxygine/core/#getscreensize-vector2","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage windowSize Vector2 The size of the window This function return the width and the height of the browser window.","title":"getScreenSize(): Vector2"},{"location":"engine/galaxygine/core/#hastouchscreen-boolean","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage hasTouchscreen Boolean Does the device has a touchscreen connected? This function return a boolean indicating if the device has a touchscreen connected.","title":"hasTouchscreen(): Boolean"},{"location":"engine/galaxygine/draw/","text":"Draw This file contains the draw methods of Galaxygine, from Rendering a rectangle to rendering a sprite. Methods The methods avainable are: constructor(context): void setCanvasContext(context): void drawRectangle(position, size, id, color): void drawRectangleOutline(position, size, id, color): void drawRectangleWithOutline(position, size, id, color): void drawImage(position, size, imagePath, id): void drawText(position, text, id, color, font): void drawStrokeText(position, text, id, color, font): void eraseRectangle(position, size): void eraseCanvas(): void constructor(): void Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The context that will be used for graphics Return Value Return Type Usage - - - Sets a renderer and the 2D context to use. setCanvasContext(): void Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The context that will be used for graphics Return Value Return Type Usage - - - Sets the 2D context to use. drawRectangle(position, size, id, color): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the rectangle will be rendered in size Vector2 Vector2(0, 0) The size that the rectangle will be id string ' ' The id that will be assigned on the rectangle color string '#000000' The color that the rectangle will be in Return Value Return Type Usage - - - Draws a rectange at the specified position with the specified size and the specified color. drawRectangleOutline(position, size, id, color): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the outline of the rectangle will be rendered in size Vector2 Vector2(0, 0) The size that the outline of the rectangle will be id string '' The id that will be assigned on the outline of rectangle color string '#000000' The color that the outline of rectangle will be in Return Value Return Type Usage - - - Draws an outline of a rectange at the specified position with the specified size and the specified color. drawRectangleWithOutline(position, size, id, outlineColor, squareColor): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the rectangle will be rendered in size Vector2 Vector2(0, 0) The size that the rectangle will be id string ' ' The id that will be assigned on the rectangle outlineColor string '#000000' The color that the outline of rectangle will be in rectangleColor string '#000000' The color that the rectangle will be in Return Value Return Type Usage - - - Draws a rectange with a seperate outline at the specified position with the specified size and the specified color. Note The rectangle with the outline has an id of id + '_outline' . i.e. If the id is rect the rectangle with the outline id will be rect_outline drawImage(position, size, imagePath, id): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the image will be rendered in size Vector2 Vector2(0, 0) The size that the image will be imagePath string ' ' The file location of the image id string ' ' The id that will be assigned on the rectangle Draws an image from the specified location in the specified position at the specified sized with the specified id drawText(position, text, id, color, font): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the text will be rendered in text string ' ' The text that will be shown id string ' ' The id that will be assigned on the rectangle color string '#000000' The color of the text font string '48px serif' The font that the text will use to be displayed Return Value Return Type Usage - - - Displays the specified text at the specified position with the specified id, color and font. drawStrokeText(position, text, id, color, font): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the text will be rendered in text string ' ' The text that will be shown id string ' ' The id that will be assigned on the rectangle color string '#000000' The color of the stroked text font string '48px serif' The font that the stroked text will use to be displayed Return Value Return Type Usage - - - Displays the specified stroked text at the specified position with the specified id, color and font. eraseRectangle(position, size): void Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the rectangle will be rendered in size Vector2 Vector2(0, 0) The size of the rectangle Return Value Return Type Usage - - - Erases a rectangle on the specified position with the specifed size. eraseCanvas(): void Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage - - - Erases the whole canvas.","title":"Draw"},{"location":"engine/galaxygine/draw/#draw","text":"This file contains the draw methods of Galaxygine, from Rendering a rectangle to rendering a sprite.","title":"Draw"},{"location":"engine/galaxygine/draw/#methods","text":"The methods avainable are: constructor(context): void setCanvasContext(context): void drawRectangle(position, size, id, color): void drawRectangleOutline(position, size, id, color): void drawRectangleWithOutline(position, size, id, color): void drawImage(position, size, imagePath, id): void drawText(position, text, id, color, font): void drawStrokeText(position, text, id, color, font): void eraseRectangle(position, size): void eraseCanvas(): void","title":"Methods"},{"location":"engine/galaxygine/draw/#constructor-void","text":"Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The context that will be used for graphics Return Value Return Type Usage - - - Sets a renderer and the 2D context to use.","title":"constructor(): void"},{"location":"engine/galaxygine/draw/#setcanvascontext-void","text":"Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The context that will be used for graphics Return Value Return Type Usage - - - Sets the 2D context to use.","title":"setCanvasContext(): void"},{"location":"engine/galaxygine/draw/#drawrectangleposition-size-id-color-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the rectangle will be rendered in size Vector2 Vector2(0, 0) The size that the rectangle will be id string ' ' The id that will be assigned on the rectangle color string '#000000' The color that the rectangle will be in Return Value Return Type Usage - - - Draws a rectange at the specified position with the specified size and the specified color.","title":"drawRectangle(position, size, id, color): void"},{"location":"engine/galaxygine/draw/#drawrectangleoutlineposition-size-id-color-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the outline of the rectangle will be rendered in size Vector2 Vector2(0, 0) The size that the outline of the rectangle will be id string '' The id that will be assigned on the outline of rectangle color string '#000000' The color that the outline of rectangle will be in Return Value Return Type Usage - - - Draws an outline of a rectange at the specified position with the specified size and the specified color.","title":"drawRectangleOutline(position, size, id, color): void"},{"location":"engine/galaxygine/draw/#drawrectanglewithoutlineposition-size-id-outlinecolor-squarecolor-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the rectangle will be rendered in size Vector2 Vector2(0, 0) The size that the rectangle will be id string ' ' The id that will be assigned on the rectangle outlineColor string '#000000' The color that the outline of rectangle will be in rectangleColor string '#000000' The color that the rectangle will be in Return Value Return Type Usage - - - Draws a rectange with a seperate outline at the specified position with the specified size and the specified color. Note The rectangle with the outline has an id of id + '_outline' . i.e. If the id is rect the rectangle with the outline id will be rect_outline","title":"drawRectangleWithOutline(position, size, id, outlineColor, squareColor): void"},{"location":"engine/galaxygine/draw/#drawimageposition-size-imagepath-id-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the image will be rendered in size Vector2 Vector2(0, 0) The size that the image will be imagePath string ' ' The file location of the image id string ' ' The id that will be assigned on the rectangle Draws an image from the specified location in the specified position at the specified sized with the specified id","title":"drawImage(position, size, imagePath, id): void"},{"location":"engine/galaxygine/draw/#drawtextposition-text-id-color-font-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the text will be rendered in text string ' ' The text that will be shown id string ' ' The id that will be assigned on the rectangle color string '#000000' The color of the text font string '48px serif' The font that the text will use to be displayed Return Value Return Type Usage - - - Displays the specified text at the specified position with the specified id, color and font.","title":"drawText(position, text, id, color, font): void"},{"location":"engine/galaxygine/draw/#drawstroketextposition-text-id-color-font-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the text will be rendered in text string ' ' The text that will be shown id string ' ' The id that will be assigned on the rectangle color string '#000000' The color of the stroked text font string '48px serif' The font that the stroked text will use to be displayed Return Value Return Type Usage - - - Displays the specified stroked text at the specified position with the specified id, color and font.","title":"drawStrokeText(position, text, id, color, font): void"},{"location":"engine/galaxygine/draw/#eraserectangleposition-size-void","text":"Parameter Parameter Type Default Usage position Vector2 Vector2(0, 0) The position that the rectangle will be rendered in size Vector2 Vector2(0, 0) The size of the rectangle Return Value Return Type Usage - - - Erases a rectangle on the specified position with the specifed size.","title":"eraseRectangle(position, size): void"},{"location":"engine/galaxygine/draw/#erasecanvas-void","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage - - - Erases the whole canvas.","title":"eraseCanvas(): void"},{"location":"engine/galaxygine/input_handler/","text":"InputHandler This file contains the InputHandler methods of Galaxygine, from detecting keypresses to detecting key actions. Methods The methods avainable are: getKeyPressArray(): Array isKeyPressed(key): boolean isAnyKeyPressed(): boolean isKeyArrayPressed(keyArray): boolean isKeyActionPressed(actionID): boolean getKeyPressArray(): Array Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage keyArray Array An array containing all the keys that are pressed This function returns an array containg all the keys that are currently pressed. isKeyPressed(key): boolean Parameter Parameter Type Default Usage key string ' ' The keyCode to check Return Value Return Type Usage isKeyPressed boolean Is this key currently pressed? This function returns a boolean with the value indicating if the key is pressed. isAnyKeyPressed(): boolean Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage isAnyKeyPressed boolean Is any key pressed? This function returns a boolean with the value indicating if the any key is pressed. isKeyArrayPressed(keyArray): boolean Parameter Parameter Type Default Usage keyArray Array [] An array with the keyCodes to check Return Value Return Type Usage isAnyKeyInKeyArrayPressed boolean Is any key pressed? This function returns a boolean with the value indicating if the any key in the keyArray is pressed. isKeyActionPressed(actionID): boolean Parameter Parameter Type Default Usage keyArray Array [] An array with the keyCodes to check Parameter Parameter Type Default Usage actionID string ' ' The id of the action to check This function returns a boolean with the value indicating if a key in the keyAction with the specified actionID is pressed. Note For more info on keyActions click here","title":"InputHandler"},{"location":"engine/galaxygine/input_handler/#inputhandler","text":"This file contains the InputHandler methods of Galaxygine, from detecting keypresses to detecting key actions.","title":"InputHandler"},{"location":"engine/galaxygine/input_handler/#methods","text":"The methods avainable are: getKeyPressArray(): Array isKeyPressed(key): boolean isAnyKeyPressed(): boolean isKeyArrayPressed(keyArray): boolean isKeyActionPressed(actionID): boolean","title":"Methods"},{"location":"engine/galaxygine/input_handler/#getkeypressarray-array","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage keyArray Array An array containing all the keys that are pressed This function returns an array containg all the keys that are currently pressed.","title":"getKeyPressArray(): Array"},{"location":"engine/galaxygine/input_handler/#iskeypressedkey-boolean","text":"Parameter Parameter Type Default Usage key string ' ' The keyCode to check Return Value Return Type Usage isKeyPressed boolean Is this key currently pressed? This function returns a boolean with the value indicating if the key is pressed.","title":"isKeyPressed(key): boolean"},{"location":"engine/galaxygine/input_handler/#isanykeypressed-boolean","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage isAnyKeyPressed boolean Is any key pressed? This function returns a boolean with the value indicating if the any key is pressed.","title":"isAnyKeyPressed(): boolean"},{"location":"engine/galaxygine/input_handler/#iskeyarraypressedkeyarray-boolean","text":"Parameter Parameter Type Default Usage keyArray Array [] An array with the keyCodes to check Return Value Return Type Usage isAnyKeyInKeyArrayPressed boolean Is any key pressed? This function returns a boolean with the value indicating if the any key in the keyArray is pressed.","title":"isKeyArrayPressed(keyArray): boolean"},{"location":"engine/galaxygine/input_handler/#iskeyactionpressedactionid-boolean","text":"Parameter Parameter Type Default Usage keyArray Array [] An array with the keyCodes to check Parameter Parameter Type Default Usage actionID string ' ' The id of the action to check This function returns a boolean with the value indicating if a key in the keyAction with the specified actionID is pressed. Note For more info on keyActions click here","title":"isKeyActionPressed(actionID): boolean"},{"location":"engine/galaxygine/sound/","text":"Sound This file contains the Sound methods of Galaxygine, from loading sounds to playing them. Methods The methods avainable are: addSound(soundID, soundPath): void removeSound(soundID): void removeALLSounds(): void getSoundLibrary(): Array<{soundID: string; sound: HTMLAudioElement}> getSoundElementFromLibrary(soundID): number | {soundID: string; sound: HTMLAudioElement} playSound(soundID): void stopSound(soundID): void addSound(soundID, soundPath): void Parameter Parameter Type Default Usage soundID string ' ' The id that will be assigned on the sound soundPath string ' ' The location of the sound Return Value Return Type Usage - - - This function adds a sound to the sound library. removeSound(soundID): void Parameter Parameter Type Default Usage soundID string ' ' The id that will be assigned on the sound Return Value Return Type Usage - - - This function removes a sound from the sound library. removeALLSound(): void Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage - - - This function removes all sounds from the sound library. getSoundLibrary(): Array<{soundID: string; sound: HTMLAudioElement}> Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage soundLibrary Array<{soundID: string; sound: HTMLAudioElement}> The current sound library This function returns the the sound library. getSoundElementFromLibrary(soundID): number | {soundID: string; sound: HTMLAudioElement} Parameter Parameter Type Default Usage soundID string ' ' The id of the sound to get Return Value Return Type Usage sound {soundID: string; sound: HTMLAudioElement} The sound to be returned if it is found. errorCode number Returns -1 if it is not found This function returns a sound with the specified soundID from the current sound library. playSound(soundID): void Parameter Parameter Type Default Usage soundID string ' ' The id of the sound to get Return Value Return Type Usage - - - This function plays a sound with the specified soundID. stopSound(soundID): void Parameter Parameter Type Default Usage soundID string ' ' The id of the sound to get Return Value Return Type Usage - - - This function stops a sound with the specified soundID.","title":"Sound"},{"location":"engine/galaxygine/sound/#sound","text":"This file contains the Sound methods of Galaxygine, from loading sounds to playing them.","title":"Sound"},{"location":"engine/galaxygine/sound/#methods","text":"The methods avainable are: addSound(soundID, soundPath): void removeSound(soundID): void removeALLSounds(): void getSoundLibrary(): Array<{soundID: string; sound: HTMLAudioElement}> getSoundElementFromLibrary(soundID): number | {soundID: string; sound: HTMLAudioElement} playSound(soundID): void stopSound(soundID): void","title":"Methods"},{"location":"engine/galaxygine/sound/#addsoundsoundid-soundpath-void","text":"Parameter Parameter Type Default Usage soundID string ' ' The id that will be assigned on the sound soundPath string ' ' The location of the sound Return Value Return Type Usage - - - This function adds a sound to the sound library.","title":"addSound(soundID, soundPath): void"},{"location":"engine/galaxygine/sound/#removesoundsoundid-void","text":"Parameter Parameter Type Default Usage soundID string ' ' The id that will be assigned on the sound Return Value Return Type Usage - - - This function removes a sound from the sound library.","title":"removeSound(soundID): void"},{"location":"engine/galaxygine/sound/#removeallsound-void","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage - - - This function removes all sounds from the sound library.","title":"removeALLSound(): void"},{"location":"engine/galaxygine/sound/#getsoundlibrary-arraysoundid-string-sound-htmlaudioelement","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage soundLibrary Array<{soundID: string; sound: HTMLAudioElement}> The current sound library This function returns the the sound library.","title":"getSoundLibrary(): Array&lt;{soundID: string; sound: HTMLAudioElement}&gt;"},{"location":"engine/galaxygine/sound/#getsoundelementfromlibrarysoundid-number-soundid-string-sound-htmlaudioelement","text":"Parameter Parameter Type Default Usage soundID string ' ' The id of the sound to get Return Value Return Type Usage sound {soundID: string; sound: HTMLAudioElement} The sound to be returned if it is found. errorCode number Returns -1 if it is not found This function returns a sound with the specified soundID from the current sound library.","title":"getSoundElementFromLibrary(soundID): number | {soundID: string; sound: HTMLAudioElement}"},{"location":"engine/galaxygine/sound/#playsoundsoundid-void","text":"Parameter Parameter Type Default Usage soundID string ' ' The id of the sound to get Return Value Return Type Usage - - - This function plays a sound with the specified soundID.","title":"playSound(soundID): void"},{"location":"engine/galaxygine/sound/#stopsoundsoundid-void","text":"Parameter Parameter Type Default Usage soundID string ' ' The id of the sound to get Return Value Return Type Usage - - - This function stops a sound with the specified soundID.","title":"stopSound(soundID): void"},{"location":"engine/renderer/renderObject/","text":"RenderObject This file contains the RenderObject methods of Galaxygine, from the initalizing the RenderObject to rendering it. Methods The methods avainable are: constructor(position, type): void getPosition(): Vector2 getID(): string getType(): string setPosition(newPosition): void setID(newID): void render(context): void constructor(position, type): void Parameter Parameter Type Default Usage position Vector2 new Vector2() The position of the RenderObject type string 'renderObject' The type of the RenderObject Return Value Return Type Usage - - - The constructor of the RenderObject class. getPosition(): Vector2 Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage position Vector2 The position of the RenderObject This function return the RenderObject's position. getID(): string Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage id string The id of the RenderObject This function return the RenderObject's id. getType(): string Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage type string The type of the RenderObject This function return the RenderObject's type. setPosition(newPosition): string Parameter Parameter Type Default Usage newPosition Vector2 new Vector2() The new position of this RenderObject Return Value Return Type Usage - - - This function sets the RenderObject's position. setID(newID): string Parameter Parameter Type Default Usage newID string ' ' The new id of this RenderObject Return Value Return Type Usage - - - This function sets the RenderObject's id. render(context): void Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The context that the RenderObject will be rendered in Return Value Return Type Usage - - - This function renders the RenderObject.","title":"RenderObject"},{"location":"engine/renderer/renderObject/#renderobject","text":"This file contains the RenderObject methods of Galaxygine, from the initalizing the RenderObject to rendering it.","title":"RenderObject"},{"location":"engine/renderer/renderObject/#methods","text":"The methods avainable are: constructor(position, type): void getPosition(): Vector2 getID(): string getType(): string setPosition(newPosition): void setID(newID): void render(context): void","title":"Methods"},{"location":"engine/renderer/renderObject/#constructorposition-type-void","text":"Parameter Parameter Type Default Usage position Vector2 new Vector2() The position of the RenderObject type string 'renderObject' The type of the RenderObject Return Value Return Type Usage - - - The constructor of the RenderObject class.","title":"constructor(position, type): void"},{"location":"engine/renderer/renderObject/#getposition-vector2","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage position Vector2 The position of the RenderObject This function return the RenderObject's position.","title":"getPosition(): Vector2"},{"location":"engine/renderer/renderObject/#getid-string","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage id string The id of the RenderObject This function return the RenderObject's id.","title":"getID(): string"},{"location":"engine/renderer/renderObject/#gettype-string","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage type string The type of the RenderObject This function return the RenderObject's type.","title":"getType(): string"},{"location":"engine/renderer/renderObject/#setpositionnewposition-string","text":"Parameter Parameter Type Default Usage newPosition Vector2 new Vector2() The new position of this RenderObject Return Value Return Type Usage - - - This function sets the RenderObject's position.","title":"setPosition(newPosition): string"},{"location":"engine/renderer/renderObject/#setidnewid-string","text":"Parameter Parameter Type Default Usage newID string ' ' The new id of this RenderObject Return Value Return Type Usage - - - This function sets the RenderObject's id.","title":"setID(newID): string"},{"location":"engine/renderer/renderObject/#rendercontext-void","text":"Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The context that the RenderObject will be rendered in Return Value Return Type Usage - - - This function renders the RenderObject.","title":"render(context): void"},{"location":"engine/renderer/renderObjectOther/","text":"Other RenderObject This file contains other render objects. Other Useful RenderObjects Here is a list of other useful render objects RectangleRenderObject : This render objects is used on the drawRectangle method on Draw RectangleOutlineRenderObject : This render objects is used on the drawRectangleOutline method on Draw ImageRenderObject : This render objects is used on the drawImage method on Draw TextRenderObject : This render objects is used on the drawText method on Draw StrokeTextRenderObject : This render objects is used on the drawStrokeText method on Draw","title":"Other RenderObjects"},{"location":"engine/renderer/renderObjectOther/#other-renderobject","text":"This file contains other render objects.","title":"Other RenderObject"},{"location":"engine/renderer/renderObjectOther/#other-useful-renderobjects","text":"Here is a list of other useful render objects RectangleRenderObject : This render objects is used on the drawRectangle method on Draw RectangleOutlineRenderObject : This render objects is used on the drawRectangleOutline method on Draw ImageRenderObject : This render objects is used on the drawImage method on Draw TextRenderObject : This render objects is used on the drawText method on Draw StrokeTextRenderObject : This render objects is used on the drawStrokeText method on Draw","title":"Other Useful RenderObjects"},{"location":"engine/renderer/renderer/","text":"Renderer This file contains the Renderer methods of Galaxygine, from rendering objects to getting RenderObjects. Terminology RenderObject : A render object is a class with logic for rendering it. Object : An object is an array of the RenderObject and it's id . Syntax: [ RenderObject, id ] Methods The methods avainable are: getRenderObject(index): [RenderObject, number] getRenderObjectByID(id): [RenderObject. number] | number setRenderObject(object): void setRenderObjectByID(id, renderObject): void addRenderObject(renderObject): void renderObjects(context): void getRenderObject(index): [RenderObject, number] Parameter Parameter Type Default Usage index number 0 The index of the object to get Return Value Return Type Usage object [RenderObject, number] The returned object Gets a object with the specified index. getRenderObjectByID(id): [RenderObject, number] | number Parameter Parameter Type Default Usage id string ' ' The id of the object to get Return Value Return Type Usage object [RenderObject, number] The returned object if an id is found errorCode number The error code if an error occurred Note If an object with the id isn't found, it count's as an error Gets a object with the specified id. setRenderObject(object): void Parameter Parameter Type Default Usage object [RenderObject, number] [new RenderObject(), 0] The object to set Return Value Return Type Usage - - - Sets a render object at the specified index. setRenderObjectByID(id, renderObject): void Parameter Parameter Type Default Usage id string ' ' The id to set renderObject RenderObject new RenderObject() The render object to set Return Value Return Type Usage - - - Sets a render object at the specified id. addRenderObject(renderObject): void Parameter Parameter Type Default Usage renderObject RenderObject new RenderObject() The render object to set Return Value Return Type Usage - - - Adds a render object at the last index of the render path. renderObjects(context): void Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The 2D canvas rendering context Return Value Return Type Usage - - - Renders all objects on the renderPath.","title":"Renderer"},{"location":"engine/renderer/renderer/#renderer","text":"This file contains the Renderer methods of Galaxygine, from rendering objects to getting RenderObjects.","title":"Renderer"},{"location":"engine/renderer/renderer/#terminology","text":"RenderObject : A render object is a class with logic for rendering it. Object : An object is an array of the RenderObject and it's id . Syntax: [ RenderObject, id ]","title":"Terminology"},{"location":"engine/renderer/renderer/#methods","text":"The methods avainable are: getRenderObject(index): [RenderObject, number] getRenderObjectByID(id): [RenderObject. number] | number setRenderObject(object): void setRenderObjectByID(id, renderObject): void addRenderObject(renderObject): void renderObjects(context): void","title":"Methods"},{"location":"engine/renderer/renderer/#getrenderobjectindex-renderobject-number","text":"Parameter Parameter Type Default Usage index number 0 The index of the object to get Return Value Return Type Usage object [RenderObject, number] The returned object Gets a object with the specified index.","title":"getRenderObject(index): [RenderObject, number]"},{"location":"engine/renderer/renderer/#getrenderobjectbyidid-renderobject-number-number","text":"Parameter Parameter Type Default Usage id string ' ' The id of the object to get Return Value Return Type Usage object [RenderObject, number] The returned object if an id is found errorCode number The error code if an error occurred Note If an object with the id isn't found, it count's as an error Gets a object with the specified id.","title":"getRenderObjectByID(id): [RenderObject, number] | number"},{"location":"engine/renderer/renderer/#setrenderobjectobject-void","text":"Parameter Parameter Type Default Usage object [RenderObject, number] [new RenderObject(), 0] The object to set Return Value Return Type Usage - - - Sets a render object at the specified index.","title":"setRenderObject(object): void"},{"location":"engine/renderer/renderer/#setrenderobjectbyidid-renderobject-void","text":"Parameter Parameter Type Default Usage id string ' ' The id to set renderObject RenderObject new RenderObject() The render object to set Return Value Return Type Usage - - - Sets a render object at the specified id.","title":"setRenderObjectByID(id, renderObject): void"},{"location":"engine/renderer/renderer/#addrenderobjectrenderobject-void","text":"Parameter Parameter Type Default Usage renderObject RenderObject new RenderObject() The render object to set Return Value Return Type Usage - - - Adds a render object at the last index of the render path.","title":"addRenderObject(renderObject): void"},{"location":"engine/renderer/renderer/#renderobjectscontext-void","text":"Parameter Parameter Type Default Usage context CanvasRenderingContext2D - The 2D canvas rendering context Return Value Return Type Usage - - - Renders all objects on the renderPath.","title":"renderObjects(context): void"},{"location":"engine/utils/color/","text":"Color This file contains the premade colors included in Galaxygine. Avainable Colors Beige Black Blue Brown Dark Blue Dark Grey Dark Green Dark Purple Gold Gray Light Gray Lime Magenta Maroon Orange Pink Sky Blue Violet Yellow","title":"Color"},{"location":"engine/utils/color/#color","text":"This file contains the premade colors included in Galaxygine.","title":"Color"},{"location":"engine/utils/color/#avainable-colors","text":"Beige Black Blue Brown Dark Blue Dark Grey Dark Green Dark Purple Gold Gray Light Gray Lime Magenta Maroon Orange Pink Sky Blue Violet Yellow","title":"Avainable Colors"},{"location":"engine/utils/settings/","text":"Settings This file contains the Settings of Galaxygine. Values isDebug : If true you will get a detailed analysis but the performance might suffer. Warning Set to false for production builds tick : In how many ms will the main loop be triggered","title":"Settings"},{"location":"engine/utils/settings/#settings","text":"This file contains the Settings of Galaxygine.","title":"Settings"},{"location":"engine/utils/settings/#values","text":"isDebug : If true you will get a detailed analysis but the performance might suffer. Warning Set to false for production builds tick : In how many ms will the main loop be triggered","title":"Values"},{"location":"engine/utils/vector2/","text":"Vector2 This file contains the Vector2 methods of Galaxygine. Methods The methods avainable are: constructor(x, y): void print(): void changeX(x): void changeY(y): void setX(x): void setY(y): void constructor(x, y): void Parameter Parameter Type Default Usage x number 0 The x y number 0 The y Return Value Return Type Usage - - - The constructor of Vector2, sets the specified x and y values. print(): string Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage text string The returned text Formats the x, y nicely and on a single line to use for printing. changeX(x): void Parameter Parameter Type Default Usage x number 0 The amount to change the x Return Value Return Type Usage - - - Changes the x by the specified amount changeY(Y): void Parameter Parameter Type Default Usage y number 0 The amount to change the y Return Value Return Type Usage - - - Changes the y by the specified amount setX(x): void Parameter Parameter Type Default Usage x number 0 The x Return Value Return Type Usage - - - Sets the x setY(y): void Parameter Parameter Type Default Usage Y number 0 The y Return Value Return Type Usage - - - Sets the y","title":"Vector2"},{"location":"engine/utils/vector2/#vector2","text":"This file contains the Vector2 methods of Galaxygine.","title":"Vector2"},{"location":"engine/utils/vector2/#methods","text":"The methods avainable are: constructor(x, y): void print(): void changeX(x): void changeY(y): void setX(x): void setY(y): void","title":"Methods"},{"location":"engine/utils/vector2/#constructorx-y-void","text":"Parameter Parameter Type Default Usage x number 0 The x y number 0 The y Return Value Return Type Usage - - - The constructor of Vector2, sets the specified x and y values.","title":"constructor(x, y): void"},{"location":"engine/utils/vector2/#print-string","text":"Parameter Parameter Type Default Usage - - - - Return Value Return Type Usage text string The returned text Formats the x, y nicely and on a single line to use for printing.","title":"print(): string"},{"location":"engine/utils/vector2/#changexx-void","text":"Parameter Parameter Type Default Usage x number 0 The amount to change the x Return Value Return Type Usage - - - Changes the x by the specified amount","title":"changeX(x): void"},{"location":"engine/utils/vector2/#changeyy-void","text":"Parameter Parameter Type Default Usage y number 0 The amount to change the y Return Value Return Type Usage - - - Changes the y by the specified amount","title":"changeY(Y): void"},{"location":"engine/utils/vector2/#setxx-void","text":"Parameter Parameter Type Default Usage x number 0 The x Return Value Return Type Usage - - - Sets the x","title":"setX(x): void"},{"location":"engine/utils/vector2/#setyy-void","text":"Parameter Parameter Type Default Usage Y number 0 The y Return Value Return Type Usage - - - Sets the y","title":"setY(y): void"},{"location":"res/keyAction/","text":"Key Actions Key Actions are contained in a json file named keyActions.json on the src/res/ folder of the project. Usage Key Actions are used to detect any key press on a group of keys. Each key action has a different actionID that makes the action unique. Example You need to move a 2D character left or right but with each action has more than one key. Without key actions you would do: index.ts import { Galaxygine } from './Galaxygine' ; const galaxygine = new Galaxygine (); galaxygine . setCanvasContext ( galaxygine . Core . engineInitialization ()); galaxygine . galaxygineMainLoop (() => { if ( galaxygine . InputHandler . isKeyPressed ( \"d\" ) || galaxygine . InputHandler . isKeyPressed ( \"ArrowRight\" )) { console . log ( \"MoveRight\" ) } }); With key actions you would do: keyActions.json [ { \"actionID\" : \"key_right\" , \"keys\" : [ \"d\" , \"ArrowRight\" ] } ] index.ts import { Galaxygine } from './Galaxygine' ; const galaxygine = new Galaxygine (); galaxygine . setCanvasContext ( galaxygine . Core . engineInitialization ()); galaxygine . galaxygineMainLoop (() => { if ( galaxygine . InputHandler . isKeyActionPressed ( \"key_right\" )) { console . log ( \"MoveRight\" ) } }); File Template Below is a template of keyActions.json src/res/keyActions.json [ { \"actionID\" : \"key_right\" , \"keys\" : [ \"d\" , \"ArrowRight\" ] }, { \"actionID\" : \"key_left\" , \"keys\" : [ \"a\" , \"ArrowLeft\" ] } ]","title":"keyActions"},{"location":"res/keyAction/#key-actions","text":"Key Actions are contained in a json file named keyActions.json on the src/res/ folder of the project.","title":"Key Actions"},{"location":"res/keyAction/#usage","text":"Key Actions are used to detect any key press on a group of keys. Each key action has a different actionID that makes the action unique.","title":"Usage"},{"location":"res/keyAction/#example","text":"You need to move a 2D character left or right but with each action has more than one key. Without key actions you would do: index.ts import { Galaxygine } from './Galaxygine' ; const galaxygine = new Galaxygine (); galaxygine . setCanvasContext ( galaxygine . Core . engineInitialization ()); galaxygine . galaxygineMainLoop (() => { if ( galaxygine . InputHandler . isKeyPressed ( \"d\" ) || galaxygine . InputHandler . isKeyPressed ( \"ArrowRight\" )) { console . log ( \"MoveRight\" ) } }); With key actions you would do: keyActions.json [ { \"actionID\" : \"key_right\" , \"keys\" : [ \"d\" , \"ArrowRight\" ] } ] index.ts import { Galaxygine } from './Galaxygine' ; const galaxygine = new Galaxygine (); galaxygine . setCanvasContext ( galaxygine . Core . engineInitialization ()); galaxygine . galaxygineMainLoop (() => { if ( galaxygine . InputHandler . isKeyActionPressed ( \"key_right\" )) { console . log ( \"MoveRight\" ) } });","title":"Example"},{"location":"res/keyAction/#file-template","text":"Below is a template of keyActions.json src/res/keyActions.json [ { \"actionID\" : \"key_right\" , \"keys\" : [ \"d\" , \"ArrowRight\" ] }, { \"actionID\" : \"key_left\" , \"keys\" : [ \"a\" , \"ArrowLeft\" ] } ]","title":"File Template"},{"location":"res/resources/","text":"Resources Galaxygine uses resources for images, sounds or other config files. The resources default location is src/res/ Config Files The config files that are located on the src/res/ folder are: keyActions : Not Needed","title":"Resources"},{"location":"res/resources/#resources","text":"Galaxygine uses resources for images, sounds or other config files. The resources default location is src/res/","title":"Resources"},{"location":"res/resources/#config-files","text":"The config files that are located on the src/res/ folder are: keyActions : Not Needed","title":"Config Files"}]}